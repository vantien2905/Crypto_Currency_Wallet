//
//  HomeViewController.swift
//  Crypto_Currency_Wallet
//
//  Created Tien Dinh on 11/06/2021.
//  Copyright Â© 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Tien Dinh
//

import UIKit
import Toast_Swift

class HomeViewController: UIViewController {
    
    @IBOutlet weak var tableView    : UITableView!
    @IBOutlet weak var topView      : HomeTopView!

	var presenter: HomePresenterProtocol?

	override func viewDidLoad() {
        super.viewDidLoad()
        configureTableView()
        setUpViews()
        hideKeyboard()
        presenter?.getListCoinRepeat(AppConstant.countdownRefresh)
        ReachabilityHelper.shared.reachability.subscribeEvents(self)
        
        let swipeRight = UISwipeGestureRecognizer(target: self,
                                                  action: #selector(respondToSwipeGesture))
            swipeRight.direction = .right
            self.view.addGestureRecognizer(swipeRight)
        let swipeLeft = UISwipeGestureRecognizer(target: self,
                                                 action: #selector(respondToSwipeGesture))
            swipeRight.direction = .left
            self.view.addGestureRecognizer(swipeLeft)

    }
    
    deinit {
        ReachabilityHelper.shared.reachability.unsubscribeEvents(self)
    }
    
    @objc func respondToSwipeGesture(gesture: UIGestureRecognizer) {
        if let swipeGesture = gesture as? UISwipeGestureRecognizer {
            switch swipeGesture.direction {
            case .right:
                self.topView.switchAction(.search)
            case .left:
                self.topView.switchAction(.favorite)
            default:
                break
            }
        }
    }
    
    private func configureTableView() {
        tableView.registerTableCell(CoinTableViewCell.self)
        tableView.dataSource = self
        tableView.rowHeight = UITableView.automaticDimension
        tableView.tableFooterView = UIView()
    }
    
    private func setUpViews() {
        topView.actionCallback = {[weak self] type in
            guard let self = self else { return }
            self.presenter?.filterDataType(type)
        }
        
        topView.searchDidChangeCallBack = {[weak self] value in
            guard let self = self else { return }
            self.presenter?.filterDataTypeText(value)
        }
    }
}

extension HomeViewController: HomeViewProtocol {
    func reloadData() {
        tableView.reloadData()
    }
    
    func didGetListCoinError(error: APIError) {
        view.makeToast(L10n.somethingWentWrong)
    }
}

extension HomeViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if presenter?.showSkeleton == true {
            return 13
        } else {
            presenter?.checkEmptyData(tableView: tableView)
            return presenter?.count ?? 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueTableCell(CoinTableViewCell.self)
        cell.configureSkeletons(presenter?.showSkeleton ?? false)
        if presenter?.showSkeleton == false {
            cell.setData(coin: presenter?.coin(atIndex: indexPath), indexPath: indexPath)
            cell.delegate = self
        }
        return cell
    }
}

extension HomeViewController: CoinTableViewCellDelegate {
    func favoriteActionTapped(indexPath: IndexPath) {
        self.presenter?.removeCoin(atIndex: indexPath)
    }
}

extension HomeViewController: ReachabilityServiceEvents {
    func reachabilityService(
        _ service: ReachabilityService,
        status: ReachabilityService.Status) {
        switch status {
        case .notReachable:
            presenter?.showNotInternetVC()
        default:
            break
        }
    }
}
